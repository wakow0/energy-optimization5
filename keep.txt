import pandas as pd
import numpy as np
import time
from tqdm import tqdm

# Load processed dataset
df = pd.read_csv("processed_data.csv")

# Parameters
battery_capacity = 2000  # kWh
battery_max_charge = 1000  # kW
battery_max_discharge = 1000  # kW
soc_min = 5  # %
soc_max = 100  # %
eta_ch = 0.95
eta_dis = 0.95
FIXED_IMPORT_PRICE = 0.1939
FIXED_EXPORT_PRICE = 0.0769
time_step = 0.5  # 30-minute intervals

# Pricing thresholds
Q1_import = df["total_consumption_rate"].quantile(0.25)
Q3_import = df["total_consumption_rate"].quantile(0.75)
Q3_export = df["grid_sellback_rate"].quantile(0.75)

# Initialize DataFrames
df_fixed = df.copy()
df_dynamic = df.copy()

for df_version in [df_fixed, df_dynamic]:
    df_version["P_import (kW)"] = 0.0
    df_version["P_export (kW)"] = 0.0
    df_version["P_bat_ch (kW)"] = 0.0
    df_version["P_bat_dis (kW)"] = 0.0
    df_version["SOC (%)"] = 50.0

# Start execution timer
start_time = time.time()

# Rule-Based Logic Implementation
for strategy, df_version in [("FIXED", df_fixed), ("DYNAMIC", df_dynamic)]:
    for t in tqdm(range(1, len(df_version)), desc=f"{strategy} Pricing Optimization"):
        renewable = df_version.loc[t, "dc_ground_1500vdc_power_output"] + df_version.loc[t, "windflow_33_[500kw]_power_output"]
        demand = df_version.loc[t, "ac_primary_load"]

        # Pricing determination
        import_price = FIXED_IMPORT_PRICE if strategy == "FIXED" else df_version.loc[t, "total_consumption_rate"]
        export_price = FIXED_EXPORT_PRICE if strategy == "FIXED" else df_version.loc[t, "grid_sellback_rate"]

        future_import_price = df_version["total_consumption_rate"].iloc[t:min(t+6, len(df_dynamic)-1)].mean()

        # Charging Decision
        charge_power = min(battery_max_charge, renewable) if import_price <= Q1_import and df_version.loc[t-1, "SOC (%)"] < soc_max else 0

        # Discharging Decision
        discharge_power = min(battery_max_discharge, (df_version.loc[t-1, "SOC (%)"] - soc_min) / 100 * battery_capacity) if import_price >= Q3_import else 0

        # Mutual Exclusivity
        if charge_power > 0:
            discharge_power = 0

        # Grid Import Decision
        unmet_demand = demand - renewable - discharge_power
        grid_import = max(unmet_demand, 0)

        # Grid Export Decision
        surplus_energy = renewable - demand - charge_power
        grid_export = max(surplus_energy, 0) if import_price >= Q3_export else 0

        # Mutual Exclusivity Grid
        if grid_import > 0:
            grid_export = 0

        # SOC Update
        soc_change = ((charge_power * eta_ch - discharge_power / eta_dis) * time_step / battery_capacity) * 100
        new_soc = np.clip(df_version.loc[t-1, "SOC (%)"] + soc_change, soc_min, soc_max)

        # Store results
        df_version.loc[t, ["P_import (kW)", "P_export (kW)", "P_bat_ch (kW)", "P_bat_dis (kW)", "SOC (%)"]] = [grid_import, grid_export, charge_power, discharge_power, new_soc]

# Execution summary
execution_time = time.time() - start_time
print(f"⏳ Total Execution Time: {execution_time:.2f} seconds")

# Save Results
df_fixed.to_csv("solution_output_FIXED_v20.csv", index=False)
df_dynamic.to_csv("solution_output_DYNAMIC_v20.csv", index=False)

# Validation function
def validate_solution(df_path):
    df = pd.read_csv(df_path)
    violations = []
    for idx, row in df.iterrows():
        renewable = row["dc_ground_1500vdc_power_output"] + row["windflow_33_[500kw]_power_output"]
        balance = renewable + row["P_import (kW)"] + row["P_bat_dis (kW)"] - row["ac_primary_load"] - row["P_bat_ch (kW)"] - row["P_export (kW)"]
        if not np.isclose(balance, 0, atol=0.01):
            violations.append((df.loc[idx, "time"], balance))

    if violations:
        print(f"❌ Validation failed: {len(violations)} violations found.")
    else:
        print("✅ No violations found.")

# Run validation
validate_solution("solution_output_FIXED_v20.csv")
validate_solution("solution_output_DYNAMIC_v20.csv")
